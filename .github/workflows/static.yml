name: Build and Deploy Documentation

on:
  push:
    branches: [main]  # Or your default branch name
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Match your Python version
          
      - name: Install MkDocs
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
      
      - name: Create Documentation Structure
        run: |
          # Initialize MkDocs project
          mkdocs new .
          
          # Configure mkdocs.yml
          cat > mkdocs.yml << 'EOF'
          site_name: DataVerse-ChatBot Documentation
          site_description: Documentation for the DataVerse-ChatBot RAG system
          theme:
            name: material
            palette:
              primary: indigo
              accent: indigo
            features:
              - navigation.instant
              - navigation.tracking
              - navigation.expand
              - content.code.copy
          markdown_extensions:
            - pymdownx.highlight
            - pymdownx.superfences
            - admonition
            - toc:
                permalink: true
          EOF
          
          # Create documentation content
          rm -f docs/index.md  # Remove default index
          
          # Create main index
          cat > docs/index.md << 'EOF'
          # DataVerse-ChatBot 
          
          A versatile RAG system that powers real-time chat with data from the web and nearly all file formats, deployable as WhatsApp/Telegram bots or an iframe.
          
          ## Overview
          
          DataVerse-ChatBot is designed to provide natural language interaction with your data, supporting:
          
          - Multiple LLM providers (OpenAI, Anthropic Claude, Cohere, Gemini, Mistral, etc.)
          - Web content retrieval and indexing
          - Support for various file formats
          - Multiple deployment options (Web, WhatsApp, Telegram)
          - Voice interaction capabilities
          
          ## Getting Started
          
          To get started with DataVerse-ChatBot, check out:
          
          - [Installation](getting-started/installation.md)
          - [Configuration](getting-started/configuration.md)
          - [Quick Start](getting-started/quick-start.md)
          EOF
          
          # Create directory structure
          mkdir -p docs/getting-started
          mkdir -p docs/modules
          mkdir -p docs/deployment
          
          # Getting Started pages
          cat > docs/getting-started/installation.md << 'EOF'
          # Installation
          
          DataVerse-ChatBot can be installed from the source repository.
          
          ## Requirements
          
          - Python 3.11+
          - API keys for chosen LLM providers 
          
          ## Steps
          
          1. Clone the repository:
             ```bash
             git clone https://github.com/AliElneklawy/DataVerse-ChatBot.git
             cd DataVerse-ChatBot
             ```
          
          2. Set up environment variables:
             ```bash
             cp .env.example .env
             # Edit .env with your API keys
             ```
          
          3. Install dependencies:
             ```bash
             pip install -e .
             ```
          
          4. Verify installation:
             ```bash
             python admin_dashboard_launcher.py --check-only
             ```
          EOF
          
          cat > docs/getting-started/configuration.md << 'EOF'
          # Configuration
          
          DataVerse-ChatBot configuration is primarily handled through the `.env` file and the `config.py` module.
          
          ## Environment Variables
          
          Create a `.env` file in the project root with the following variables:
          
          ```
          # API Keys
          ANTHROPIC_API_KEY=your_anthropic_api_key
          OPENAI_API_KEY=your_openai_api_key
          COHERE_API_KEY=your_cohere_api_key
          # Add keys for other providers as needed
          
          # Configuration
          LOG_LEVEL=INFO
          ```
          
          ## Configuration Module
          
          The `src/chatbot/config.py` file contains the main configuration class that controls the chatbot's behavior.
          EOF
          
          cat > docs/getting-started/quick-start.md << 'EOF'
          # Quick Start
          
          Get DataVerse-ChatBot up and running quickly with these steps.
          
          ## Start the Admin Dashboard
          
          ```bash
          python admin_dashboard_launcher.py
          ```
          
          This will start the dashboard on http://localhost:5000 by default.
          
          ## Deploy as a Web Application
          
          ```bash
          python src/web/chat_web_app.py
          ```
          
          ## Use as a WhatsApp Bot
          
          ```bash
          python src/whatsapp_bot.py
          ```
          
          ## Use as a Telegram Bot
          
          ```bash
          python src/tg_bot.py
          ```
          EOF
          
          # Modules documentation
          cat > docs/modules/index.md << 'EOF'
          # Modules Overview
          
          DataVerse-ChatBot is organized into several key modules:
          
          - [Chatbot Core](chatbot.md) - Main chatbot functionality
          - [RAG Implementations](rag.md) - LLM provider integrations
          - [Embeddings](embeddings.md) - Vector embedding handlers
          - [Utilities](utils.md) - Helper functions
          - [Web Interface](web.md) - Web application components
          EOF
          
          cat > docs/modules/chatbot.md << 'EOF'
          # Chatbot Core
          
          The core chatbot functionality is implemented in the `src/chatbot` package.
          
          ## Main Components
          
          - `config.py` - Configuration settings
          - `crawler.py` - Web crawling capabilities
          - `voice_mode.py` - Voice interaction features
          
          Each component handles a specific aspect of the chatbot's operation.
          EOF
          
          cat > docs/modules/rag.md << 'EOF'
          # RAG Implementations
          
          RAG (Retrieval Augmented Generation) implementations for different LLM providers are in the `src/chatbot/rag` package.
          
          ## Supported Providers
          
          - `claude_rag.py` - Anthropic Claude integration
          - `cohere_rag.py` - Cohere integration
          - `deepseek_rag.py` - DeepSeek integration
          - `gemini_rag.py` - Google Gemini integration
          - `grok_rag.py` - Grok integration
          - `mistral_rag.py` - Mistral AI integration
          - `openai_rag.py` - OpenAI integration
          
          All implementations extend the `base_rag.py` abstract base class.
          EOF
          
          cat > docs/modules/embeddings.md << 'EOF'
          # Embeddings
          
          Vector embedding handlers in the `src/chatbot/embeddings` package.
          
          ## Components
          
          - `base_embedding.py` - Abstract base class for embeddings
          
          The embeddings are used for semantic document chunking and retrieval.
          EOF
          
          cat > docs/modules/utils.md << 'EOF'
          # Utilities
          
          Helper utilities in the `src/chatbot/utils` package.
          
          ## Key Utilities
          
          - `file_loader.py` - Loading documents from various file formats
          - `inference.py` - Inference helpers
          - `make_dataset.py` - Dataset creation utilities
          - `monitor_service.py` - Monitoring tools
          - `paths.py` - Path management
          - `train_clf.py` - Training utilities
          - `utils.py` - General utilities
          EOF
          
          cat > docs/modules/web.md << 'EOF'
          # Web Interface
          
          Web interface components in the `src/web` package.
          
          ## Components
          
          - `chat_web_app.py` - Web application implementation
          - `chat_web_template.py` - Templates for the web interface
          - `admin_dashboard.py` - Administrative dashboard
          EOF
          
          # Deployment documentation
          cat > docs/deployment/index.md << 'EOF'
          # Deployment
          
          DataVerse-ChatBot can be deployed in several ways.
          
          - [Web Application](web.md)
          - [WhatsApp Bot](whatsapp.md)
          - [Telegram Bot](telegram.md)
          EOF
          
          cat > docs/deployment/web.md << 'EOF'
          # Web Application Deployment
          
          Deploy DataVerse-ChatBot as a web application.
          
          ## Local Deployment
          
          ```bash
          python src/web/chat_web_app.py
          ```
          
          ## Server Deployment
          
          For production deployment, consider using Gunicorn or uWSGI with Nginx.
          
          ### Example Gunicorn Setup
          
          ```bash
          pip install gunicorn
          gunicorn -w 4 -b 0.0.0.0:8000 src.web.chat_web_app:app
          ```
          EOF
          
          cat > docs/deployment/whatsapp.md << 'EOF'
          # WhatsApp Bot Deployment
          
          Deploy DataVerse-ChatBot as a WhatsApp bot.
          
          ## Requirements
          
          - Twilio account
          - WhatsApp Business API access
          
          ## Setup
          
          1. Set up Twilio WhatsApp Sandbox
          2. Add Twilio credentials to `.env`
          3. Run the WhatsApp bot:
             ```bash
             python src/whatsapp_bot.py
             ```
          EOF
          
          cat > docs/deployment/telegram.md << 'EOF'
          # Telegram Bot Deployment
          
          Deploy DataVerse-ChatBot as a Telegram bot.
          
          ## Requirements
          
          - Telegram Bot API token
          
          ## Setup
          
          1. Create a bot using BotFather on Telegram
          2. Add the bot token to `.env`
          3. Run the Telegram bot:
             ```bash
             python src/tg_bot.py
             ```
          EOF
          
      - name: Build documentation
        run: |
          mkdocs build
          
      - name: Deploy to GitHub Pages
        id: deployment
        # Use GitHub's official Pages action instead
        uses: actions/deploy-pages@v1
        # Note: no "with" section needed for this version
          
      # Create the artifact for GitHub Pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site
