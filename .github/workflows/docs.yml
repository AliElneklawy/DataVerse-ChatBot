name: Build and Deploy Documentation

on:
  push:
    branches: [main]  # Or your default branch name
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # Add mock API keys for documentation generation
      ANTHROPIC_API_KEY: "mock_key_for_docs"
      OPENAI_API_KEY: "mock_key_for_docs"
      COHERE_API_KEY: "mock_key_for_docs"
      MISTRAL_API_KEY: "mock_key_for_docs"
      GOOGLE_API_KEY: "mock_key_for_docs"
      GROK_API_KEY: "mock_key_for_docs"
      DEEPSEEK_API_KEY: "mock_key_for_docs"
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Match your Python version
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y portaudio19-dev python3-dev libcairo2-dev pkg-config python3-tk
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pdoc
          # We'll install minimal dependencies for documentation
          pip install docling langchain numpy pandas
      
      - name: Generate Mock Version for Documentation
        run: |
          # Create a directory for mock modules
          mkdir -p doc_src/chatbot/embeddings
          mkdir -p doc_src/chatbot/rag
          mkdir -p doc_src/chatbot/utils
          mkdir -p doc_src/web
          
          # Copy __init__.py files
          cp src/__init__.py doc_src/ || touch doc_src/__init__.py
          cp src/chatbot/__init__.py doc_src/chatbot/ || touch doc_src/chatbot/__init__.py
          cp src/chatbot/embeddings/__init__.py doc_src/chatbot/embeddings/ || touch doc_src/chatbot/embeddings/__init__.py
          cp src/chatbot/rag/__init__.py doc_src/chatbot/rag/ || touch doc_src/chatbot/rag/__init__.py
          cp src/chatbot/utils/__init__.py doc_src/chatbot/utils/ || touch doc_src/chatbot/utils/__init__.py
          cp src/web/__init__.py doc_src/web/ || touch doc_src/web/__init__.py
          
          # Create a simplified config.py that doesn't require API keys
          cat > doc_src/chatbot/config.py << 'EOF'
          """Configuration module for DataVerse-ChatBot."""
          
          class MissingAPIKeyError(Exception):
              """Exception raised when an API key is missing."""
              pass
          
          def get_api_key(key_name):
              """Return a mock key for documentation purposes."""
              return "mock_key_for_documentation"
          
          class Config:
              """Main configuration class for DataVerse-ChatBot."""
              
              def __init__(self):
                  """Initialize with default configuration."""
                  pass
                  
              # Document other methods and properties as needed
          EOF
          
          # Process and copy all Python files with simplified versions
          for py_file in $(find src -name "*.py"); do
            # Extract directory part
            dir_part=$(dirname "$py_file" | sed 's/^src/doc_src/')
            # Extract filename
            file_name=$(basename "$py_file")
            # Create target directory if it doesn't exist
            mkdir -p "$dir_part"
            
            # Skip if we've already created a custom version
            if [ -f "$dir_part/$file_name" ]; then
              continue
            fi
            
            # Create a simplified version of each module
            echo "\"\"\"Documentation for $(basename $py_file without extension)\"\"\"\n" > "$dir_part/$file_name"
            
            # Extract classes and functions to document them
            grep -E "^(class|def) " "$py_file" | while read -r line; do
              if [[ $line == class* ]]; then
                echo "$line" >> "$dir_part/$file_name"
                echo "    \"\"\"Class documentation.\"\"\"\n    pass\n" >> "$dir_part/$file_name"
              elif [[ $line == def* ]]; then
                echo "$line" >> "$dir_part/$file_name"
                echo "    \"\"\"Function documentation.\"\"\"\n    pass\n" >> "$dir_part/$file_name"
              fi
            done
          done
          
      - name: Build documentation
        run: |
          # Run pdoc on the mock source code
          pdoc --output-dir ./docs doc_src
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          force_orphan: true  # Use a single branch for gh-pages
