name: Build and Deploy Documentation

on:
  push:
    branches: [main]  # Or your default branch name
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Match your Python version
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y portaudio19-dev python3-dev libcairo2-dev pkg-config python3-tk
      
      - name: Install pdoc
        run: |
          python -m pip install --upgrade pip
          pip install pdoc
      
      - name: Create Mock Version for Documentation
        run: |
          # Create a mock documentation directory
          mkdir -p docs_src/src
          
          # Create a simple index file
          cat > docs_src/index.md << 'EOF'
          # DataVerse-ChatBot Documentation
          
          DataVerse-ChatBot is a versatile RAG system that powers real-time chat with data from the web 
          and nearly all file formats, deployable as WhatsApp/Telegram bots or an iframe.
          
          ## Project Structure
          
          - `src/`: Main source code
            - `src/chatbot/`: Core chatbot functionality
              - `src/chatbot/config.py`: Configuration settings
              - `src/chatbot/crawler.py`: Web crawling capabilities
              - `src/chatbot/voice_mode.py`: Voice interaction features
              - `src/chatbot/embeddings/`: Vector embedding handlers
              - `src/chatbot/rag/`: RAG implementation for various LLM providers
              - `src/chatbot/utils/`: Utility functions
            - `src/web/`: Web interface components
          
          ## Main Features
          
          - Support for multiple LLM providers
          - Web content integration
          - Support for various file formats
          - Deployable as chatbots on different platforms
          - Voice interaction capabilities
          
          For detailed API documentation, please see the source code files.
          EOF
          
          # Manual documentation for core modules
          mkdir -p docs_src/src/chatbot
          mkdir -p docs_src/src/chatbot/rag
          mkdir -p docs_src/src/chatbot/embeddings
          mkdir -p docs_src/src/chatbot/utils
          mkdir -p docs_src/src/web
          
          # Create module docs for chatbot
          cat > docs_src/src/chatbot/index.md << 'EOF'
          # Chatbot Module
          
          Core chatbot functionality including configuration, RAG implementations, and utilities.
          
          ## Key Components
          
          - `config.py`: Central configuration settings
          - `crawler.py`: Web content crawling
          - `voice_mode.py`: Voice interaction features
          - `embeddings/`: Vector embedding implementations
          - `rag/`: RAG implementations for different LLM providers
          - `utils/`: Helper utilities
          EOF
          
          # Create module docs for rag
          cat > docs_src/src/chatbot/rag/index.md << 'EOF'
          # RAG Implementations
          
          The `rag` module provides implementations for Retrieval-Augmented Generation with various LLM providers.
          
          ## Supported Models
          
          - `claude_rag.py`: Anthropic Claude integration
          - `cohere_rag.py`: Cohere integration
          - `deepseek_rag.py`: DeepSeek integration
          - `gemini_rag.py`: Google Gemini integration
          - `grok_rag.py`: Grok integration
          - `mistral_rag.py`: Mistral AI integration
          - `openai_rag.py`: OpenAI integration
          
          All implementations extend the `base_rag.py` abstract base class.
          EOF
          
          # Create module docs for embeddings
          cat > docs_src/src/chatbot/embeddings/index.md << 'EOF'
          # Embeddings Module
          
          Vector embedding implementations for semantic document chunking and retrieval.
          
          ## Components
          
          - `base_embedding.py`: Abstract base class for embeddings
          EOF
          
          # Create module docs for utils
          cat > docs_src/src/chatbot/utils/index.md << 'EOF'
          # Utilities
          
          Helper utilities for file processing, inference, monitoring, and paths management.
          
          ## Key Utilities
          
          - `file_loader.py`: Loading documents from various file formats
          - `inference.py`: Inference helpers
          - `make_dataset.py`: Dataset creation utilities
          - `monitor_service.py`: Monitoring tools
          - `paths.py`: Path management
          - `train_clf.py`: Training utilities
          - `utils.py`: General utilities
          EOF
          
          # Create module docs for web
          cat > docs_src/src/web/index.md << 'EOF'
          # Web Interface
          
          Web interface components for deployment as a web application.
          
          ## Components
          
          - `chat_web_app.py`: Web application implementation
          - `chat_web_template.py`: Templates for the web interface
          - `admin_dashboard.py`: Administrative dashboard
          EOF
          
      - name: Build documentation
        run: |
          # Run pdoc to generate docs from markdown files
          pdoc --template-dir="$(python -c 'import pdoc; print(pdoc.__path__[0] + "/templates")')" --output-dir=./docs docs_src
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          force_orphan: true  # Use a single branch for gh-pages
